#!/usr/bin/env python3
"""
Google Ads Mouse Clicker - T·ª± ƒë·ªông click chu·ªôt th·∫≠t v√† chuy·ªÉn tab b·∫±ng b√†n ph√≠m
Author: Assistant
Version: 1.0
"""

import time
import random
import logging
from datetime import datetime, timedelta
import os
import json
import pandas as pd
from typing import Dict, List, Tuple, Optional
import threading
import queue
import schedule
import pyautogui
import pyperclip
from PIL import Image
import cv2
import numpy as np

class GoogleAdsMouseClicker:
    def __init__(self, config_file="mouse_clicker_config.json"):
        self.config_file = config_file
        self.setup_logging()
        self.load_config()
        self.running = False
        # NgƒÉn ch·∫∑n ch·ªìng ch√©o chu k·ª≥
        self.cycle_running = False
        self.current_tab_index = 0
        self.results = []
        
        # Thi·∫øt l·∫≠p PyAutoGUI
        pyautogui.FAILSAFE = True
        pyautogui.PAUSE = 0.5
        
    def setup_logging(self):
        """Thi·∫øt l·∫≠p logging"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('google_ads_mouse_clicker.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def load_config(self):
        """Load c·∫•u h√¨nh t·ª´ file JSON"""
        default_config = {
            "tab_names": [
                "MCC Account 1",
                "MCC Account 2", 
                "MCC Account 3"
            ],
        "click_positions": {
            "refresh_button": {
                "x": 1488,
                "y": 107,
                "description": "N√∫t Refresh"
            },
            "download_button": {
                # "x": 1680,
                # "y": 728,
                "description": "N√∫t Download"
            },
            "combobox_option": {
                "x": 1550,
                "y": 550,
                "description": "T√πy ch·ªçn trong combobox"
            }
        },
            "templates": {
                "refresh_button": [],
                "download_button": [],
                "combobox_option": []
            },
            "timing": {
                "export_interval_minutes": 5,
                "export_interval_seconds": None,
                "click_delay": 1,
                "tab_switch_delay": 2,
                "export_process_wait": 15,
                "page_load_wait": 3,
                "tabs_per_cycle": 1,
                "post_cycle_delay_seconds": 120
            },
            "mouse_settings": {
                "click_duration": 1,
                "move_duration": 0.5,
                "human_like": True
            },
            "export_settings": {
                "max_retries": 3,
                "retry_delay": 5,
                "save_screenshots": True,
                "screenshot_dir": "screenshots"
            }
        }
        
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    self.config = json.load(f)
                self.logger.info(f"‚úÖ ƒê√£ load config t·ª´ {self.config_file}")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è L·ªói load config: {e}, s·ª≠ d·ª•ng config m·∫∑c ƒë·ªãnh")
                self.config = default_config
        else:
            self.config = default_config
            self.save_config()
            self.logger.info(f"‚úÖ ƒê√£ t·∫°o config m·∫∑c ƒë·ªãnh: {self.config_file}")
            
    def save_config(self):
        """L∆∞u config ra file JSON"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=4, ensure_ascii=False)
            self.logger.info(f"‚úÖ ƒê√£ l∆∞u config: {self.config_file}")
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói l∆∞u config: {e}")
            
    def human_like_delay(self, min_seconds=0.5, max_seconds=1.5):
        """Delay ng·∫´u nhi√™n gi·ªëng ng∆∞·ªùi th·∫≠t"""
        delay = random.uniform(min_seconds, max_seconds)
        time.sleep(delay)
        
    def human_like_click(self, x, y, description=""):
        """Click chu·ªôt gi·ªëng ng∆∞·ªùi th·∫≠t"""
        try:
            self.logger.info(f"üñ±Ô∏è ƒêang click {description} t·∫°i ({x}, {y})")
            
            # L·∫•y v·ªã tr√≠ hi·ªán t·∫°i c·ªßa chu·ªôt
            current_x, current_y = pyautogui.position()
            
            # T√≠nh to√°n ƒë∆∞·ªùng ƒëi ng·∫´u nhi√™n
            if self.config["mouse_settings"]["human_like"]:
                # T·∫°o ƒë∆∞·ªùng cong Bezier ng·∫´u nhi√™n
                control_points = self.generate_bezier_points(
                    (current_x, current_y), (x, y)
                )
                
                # Di chuy·ªÉn chu·ªôt theo ƒë∆∞·ªùng cong
                for point in control_points:
                    pyautogui.moveTo(point[0], point[1], 
                                   duration=self.config["mouse_settings"]["move_duration"])
                    time.sleep(random.uniform(0.01, 0.05))
            
            # Click chu·ªôt
            pyautogui.click(x, y, duration=self.config["mouse_settings"]["click_duration"])
            
            # Delay sau khi click
            click_delay = self.config["timing"]["click_delay"]
            self.human_like_delay(click_delay * 0.5, click_delay * 1.5)
            
            self.logger.info(f"‚úÖ ƒê√£ click {description}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói click {description}: {e}")
            return False
            
    def generate_bezier_points(self, start, end, num_points=10):
        """T·∫°o c√°c ƒëi·ªÉm Bezier cho ƒë∆∞·ªùng di chuy·ªÉn chu·ªôt t·ª± nhi√™n"""
        # T·∫°o control points ng·∫´u nhi√™n
        control1_x = start[0] + random.randint(-50, 50)
        control1_y = start[1] + random.randint(-50, 50)
        control2_x = end[0] + random.randint(-50, 50)
        control2_y = end[1] + random.randint(-50, 50)
        
        points = []
        for i in range(num_points + 1):
            t = i / num_points
            # Bezier curve formula
            x = (1-t)**3 * start[0] + 3*(1-t)**2*t * control1_x + 3*(1-t)*t**2 * control2_x + t**3 * end[0]
            y = (1-t)**3 * start[1] + 3*(1-t)**2*t * control1_y + 3*(1-t)*t**2 * control2_y + t**3 * end[1]
            points.append((int(x), int(y)))
            
        return points
        
    def switch_to_tab(self, tab_index):
        """Chuy·ªÉn tab b·∫±ng Ctrl+Tab ƒë∆°n gi·∫£n - kh√¥ng click Chrome"""
        try:
            tab_name = self.config["tab_names"][tab_index] if tab_index < len(self.config["tab_names"]) else f"Tab {tab_index + 1}"
            self.logger.info(f"üîÑ ƒêang chuy·ªÉn sang {tab_name} (tab {tab_index + 1})")
            
            if tab_index == 0:
                self.logger.info("   ƒê√£ ·ªü tab ƒë·∫ßu ti√™n, kh√¥ng c·∫ßn chuy·ªÉn")
                return True
            
            # Ch·ªâ b·∫•m Ctrl+Tab, kh√¥ng click Chrome ƒë·ªÉ tr√°nh load l·∫°i trang
            for i in range(tab_index):
                self.logger.info(f"   B·∫•m Ctrl+Tab l·∫ßn {i + 1}/{tab_index}")
                pyautogui.hotkey('ctrl', 'tab')
                time.sleep(1)  # Ch·ªâ ch·ªù 1 gi√¢y
            
            self.logger.info(f"‚úÖ ƒê√£ chuy·ªÉn sang {tab_name}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói chuy·ªÉn tab: {e}")
            return False
            
    def take_screenshot(self, name="screenshot", tab_name=""):
        """Ch·ª•p screenshot v√† l∆∞u"""
        try:
            if not self.config["export_settings"]["save_screenshots"]:
                return None
                
            screenshot_dir = self.config["export_settings"]["screenshot_dir"]
            os.makedirs(screenshot_dir, exist_ok=True)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{screenshot_dir}/{tab_name}_{name}_{timestamp}.png"
            
            screenshot = pyautogui.screenshot()
            screenshot.save(filename)
            
            self.logger.info(f"üì∏ ƒê√£ ch·ª•p screenshot: {filename}")
            return filename
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è L·ªói ch·ª•p screenshot: {e}")
            return None

    def locate_and_click(self, template_keys: List[str], confidence: float = 0.85, description: str = "") -> bool:
        """T√¨m n√∫t b·∫±ng template images (UI c≈©/m·ªõi) theo ƒëa t·ªâ l·ªá v√† click. Tr·∫£ v·ªÅ True n·∫øu th√†nh c√¥ng."""
        try:
            templates_cfg = self.config.get("templates", {})
            paths: List[str] = []
            for key in template_keys:
                vals = templates_cfg.get(key, [])
                if isinstance(vals, list):
                    paths.extend(vals)
                elif isinstance(vals, str):
                    paths.append(vals)

            # Chu·∫©n b·ªã ·∫£nh m√†n h√¨nh x√°m m·ªôt l·∫ßn
            screen = pyautogui.screenshot()
            screen_np = cv2.cvtColor(np.array(screen), cv2.COLOR_RGB2BGR)
            screen_gray = cv2.cvtColor(screen_np, cv2.COLOR_BGR2GRAY)

            best = {"conf": 0.0, "center": None, "path": None}
            # Th·ª≠ l·∫ßn l∆∞·ª£t t·ª´ng template v√† nhi·ªÅu t·ªâ l·ªá
            for path in paths:
                if not os.path.exists(path):
                    continue
                tpl = cv2.imread(path, cv2.IMREAD_COLOR)
                if tpl is None:
                    continue
                tpl_gray = cv2.cvtColor(tpl, cv2.COLOR_BGR2GRAY)

                # Multi-scale around 75%..130%
                for scale in np.linspace(0.75, 1.30, 12):
                    h0, w0 = tpl_gray.shape[:2]
                    h = int(h0 * scale)
                    w = int(w0 * scale)
                    if h < 10 or w < 10:
                        continue
                    if h >= screen_gray.shape[0] or w >= screen_gray.shape[1]:
                        continue
                    tpl_resized = cv2.resize(tpl_gray, (w, h), interpolation=cv2.INTER_AREA)
                    res = cv2.matchTemplate(screen_gray, tpl_resized, cv2.TM_CCOEFF_NORMED)
                    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)
                    if max_val > best["conf"]:
                        best["conf"] = max_val
                        best["center"] = (max_loc[0] + w // 2, max_loc[1] + h // 2)
                        best["path"] = path

            self.logger.info(f"üîé {description or template_keys}: max confidence = {best['conf']:.3f} (template: {best['path']})")
            if best["conf"] >= confidence and best["center"] is not None:
                cx, cy = best["center"]
                self.logger.info(f"‚úÖ T√¨m th·∫•y {description or template_keys} t·∫°i ({cx},{cy})")
                return self.human_like_click(cx, cy, description or ",".join(template_keys))

            self.logger.info(f"‚ùå Kh√¥ng t√¨m th·∫•y {description or template_keys} b·∫±ng template v·ªõi ng∆∞·ª°ng {confidence}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói locate_and_click: {e}")
            return False
            
    def export_for_tab(self, tab_index, retry_count=0):
        """Xu·∫•t file cho m·ªôt tab c·ª• th·ªÉ theo flow: Refresh ‚Üí Download ‚Üí Ch·ªçn combobox"""
        try:
            tab_name = self.config["tab_names"][tab_index] if tab_index < len(self.config["tab_names"]) else f"Tab {tab_index + 1}"
            self.logger.info(f"üöÄ B·∫Øt ƒë·∫ßu xu·∫•t file cho {tab_name}")
            
            # Ch·ªù trang ·ªïn ƒë·ªãnh tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
            self.logger.info("‚è≥ Ch·ªù trang ·ªïn ƒë·ªãnh...")
            time.sleep(3)
            
            # Ch·ª•p screenshot tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
            self.take_screenshot("before_export", tab_name)

            # B∆∞·ªõc 1: Refresh (CH·ªà d√πng template)
            self.logger.info("üîÑ Refresh (image only)...")
            clicked_refresh = self.locate_and_click(["refresh_button"], confidence=0.8, description="Refresh (template)")
            if not clicked_refresh:
                self.logger.error("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t Refresh b·∫±ng h√¨nh ·∫£nh")
                return False
            self.take_screenshot("after_refresh_click", tab_name)
            page_load_wait = self.config["timing"].get("page_load_wait", 1)
            if page_load_wait > 0:
                self.logger.info(f"‚è≥ Ch·ªù {page_load_wait} gi√¢y sau Refresh...")
                time.sleep(page_load_wait)
            
            # B∆∞·ªõc 2: Click n√∫t Download (CH·ªà d√πng template)
            self.logger.info("‚¨áÔ∏è Download (image only)...")
            # H·∫° ng∆∞·ª°ng nh·∫≠n di·ªán d√†nh ri√™ng cho Download ƒë·ªÉ tƒÉng ƒë·ªô b·ªÅn khi giao di·ªán thay ƒë·ªïi
            clicked_download = self.locate_and_click(["download_button"], confidence=0.70, description="Download (template)")
            if not clicked_download:
                self.logger.error(f"‚ùå Kh√¥ng t√¨m th·∫•y n√∫t Download b·∫±ng h√¨nh ·∫£nh cho {tab_name}")
                return False
                
            # Ch·ª•p screenshot sau khi click Download
            self.take_screenshot("after_download_click", tab_name)
            
            # Ch·ªù combobox hi·ªÉn th·ªã
            self.logger.info("‚è≥ Ch·ªù combobox hi·ªÉn th·ªã...")
            time.sleep(2)
            
            # B∆∞·ªõc 3: Ch·ªçn t√πy ch·ªçn trong combobox (.csv) (CH·ªà d√πng template)
            self.logger.info("üìÑ Ch·ªçn .csv (image only)...")
            clicked_csv = self.locate_and_click(["combobox_option"], confidence=0.8, description="CSV option (template)")
            if not clicked_csv:
                self.logger.error(f"‚ùå Kh√¥ng t√¨m th·∫•y m·ª•c .csv trong combobox b·∫±ng h√¨nh ·∫£nh cho {tab_name}")
                return False
                
            # Ch·ª•p screenshot sau khi ch·ªçn combobox
            self.take_screenshot("after_combobox_selection", tab_name)

            # Theo y√™u c·∫ßu: click th√™m 1 l·∫ßn n·ªØa v√†o v·ªã tr√≠ combobox sau khi ƒë√£ ch·ªçn
            try:
                self.logger.info("üñ±Ô∏è Click th√™m 1 l·∫ßn n·ªØa v√†o .csv ƒë·ªÉ x√°c nh·∫≠n/ƒë√≥ng menu (image only)")
                time.sleep(0.5)
                self.locate_and_click(["combobox_option"], confidence=0.8, description="CSV option (extra)")
            except Exception as _e:
                self.logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ click th√™m l·∫ßn n·ªØa v√†o combobox: {_e}")
            
            # Ch·ªù qu√° tr√¨nh download ho√†n t·∫•t
            export_wait = self.config["timing"]["export_process_wait"]
            self.logger.info(f"‚è≥ Ch·ªù {export_wait} gi√¢y ƒë·ªÉ download ho√†n t·∫•t cho {tab_name}...")
            time.sleep(export_wait)
            
            # Ch·ª•p screenshot cu·ªëi c√πng
            self.take_screenshot("download_completed", tab_name)
            
            self.logger.info(f"‚úÖ Ho√†n th√†nh download cho {tab_name}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói download cho {tab_name}: {e}")
            
            # Retry n·∫øu ch∆∞a v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠
            max_retries = self.config["export_settings"]["max_retries"]
            if retry_count < max_retries:
                retry_delay = self.config["export_settings"]["retry_delay"]
                self.logger.info(f"üîÑ Th·ª≠ l·∫°i l·∫ßn {retry_count + 1}/{max_retries} cho {tab_name} sau {retry_delay} gi√¢y...")
                time.sleep(retry_delay)
                return self.export_for_tab(tab_index, retry_count + 1)
            else:
                self.logger.error(f"‚ùå ƒê√£ th·ª≠ {max_retries} l·∫ßn nh∆∞ng v·∫´n th·∫•t b·∫°i cho {tab_name}")
                return False
                
    def reset_to_first_tab(self):
        """Reset v·ªÅ tab ƒë·∫ßu ti√™n"""
        try:
            self.logger.info("üîÑ Reset v·ªÅ tab ƒë·∫ßu ti√™n...")
            # ƒê·∫£m b·∫£o Chrome ƒë∆∞·ª£c focus tr∆∞·ªõc khi reset
            pyautogui.click(100, 100)
            time.sleep(1)
            
            # S·ª≠ d·ª•ng Ctrl + 1 ƒë·ªÉ v·ªÅ tab ƒë·∫ßu ti√™n
            pyautogui.hotkey('ctrl', '1')
            time.sleep(3)  # TƒÉng delay ƒë·ªÉ tr√°nh refresh
            
            # Ch·ªù trang ·ªïn ƒë·ªãnh
            self.logger.info("‚è≥ Ch·ªù trang ·ªïn ƒë·ªãnh sau khi reset...")
            time.sleep(5)
            
            self.logger.info("‚úÖ ƒê√£ reset v·ªÅ tab ƒë·∫ßu ti√™n")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói reset v·ªÅ tab ƒë·∫ßu ti√™n: {e}")
            return False

    def debug_tab_info(self):
        """Debug th√¥ng tin tab"""
        try:
            self.logger.info("üîç Debug th√¥ng tin tab:")
            self.logger.info(f"   S·ªë tab trong config: {len(self.config['tab_names'])}")
            for i, name in enumerate(self.config["tab_names"]):
                self.logger.info(f"   Tab {i}: {name}")
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói debug tab info: {e}")

    def run_export_cycle(self):
        """Ch·∫°y m·ªôt chu k·ª≥ download cho t·∫•t c·∫£ tab theo flow: Download ‚Üí Combobox ‚Üí Ctrl+Tab m·ªôt l·∫ßn gi·ªØa c√°c tab (b·ªè Refresh)"""
        try:
            # Ch·∫∑n re-entry n·∫øu chu k·ª≥ tr∆∞·ªõc ch∆∞a xong
            if self.cycle_running:
                self.logger.warning("‚ö†Ô∏è Chu k·ª≥ tr∆∞·ªõc ch∆∞a k·∫øt th√∫c, b·ªè qua l·∫ßn ch·∫°y n√†y ƒë·ªÉ tr√°nh tr√πng l·∫∑p")
                return False
            self.cycle_running = True

            self.logger.info("üîÑ B·∫Øt ƒë·∫ßu chu k·ª≥ download")
            
            # Debug th√¥ng tin tab
            self.debug_tab_info()
            
            # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o Chrome s·∫µn s√†ng
            self.logger.info("‚è≥ Ch·ªù Chrome s·∫µn s√†ng...")
            time.sleep(3)
            
            total_tabs_config = len(self.config["tab_names"])
            tabs_per_cycle_cfg = self.config["timing"].get("tabs_per_cycle")
            ctrl_tabs_per_cycle = self.config["timing"].get("ctrl_tabs_per_cycle")

            # N·∫øu c·∫•u h√¨nh s·ªë l·∫ßn b·∫•m Ctrl+Tab, s·ªë tab x·ª≠ l√Ω = s·ªë l·∫ßn b·∫•m + 1
            if ctrl_tabs_per_cycle is not None:
                presses = int(max(0, ctrl_tabs_per_cycle))
                tabs_to_process = min(total_tabs_config, presses + 1)
                self.logger.info(f"üìä S·∫Ω b·∫•m Ctrl+Tab {presses} l·∫ßn ‚Üí x·ª≠ l√Ω {tabs_to_process} tab")
            else:
                tabs_to_process = tabs_per_cycle_cfg or total_tabs_config
                tabs_to_process = max(1, min(tabs_to_process, total_tabs_config))
                presses = max(0, tabs_to_process - 1)
                self.logger.info(f"üìä S·∫Ω x·ª≠ l√Ω {tabs_to_process}/{total_tabs_config} tab trong chu k·ª≥ n√†y")

            # X·ª≠ l√Ω tab ƒë·∫ßu ti√™n (kh√¥ng b·∫•m Ctrl+Tab)
            for i in range(tabs_to_process):
                tab_name = self.config["tab_names"][i]
                self.logger.info(f"üìÇ X·ª≠ l√Ω tab {i+1}/{tabs_to_process}: {tab_name}")

                # V·ªõi c√°c tab th·ª© 2 tr·ªü ƒëi: b·∫•m Ctrl+Tab ƒë√∫ng 1 l·∫ßn cho m·ªói tab
                if i > 0:
                    self.logger.info("   Ctrl+Tab sang tab k·∫ø ti·∫øp")
                    pyautogui.hotkey('ctrl', 'tab')
                    time.sleep(self.config["timing"]["tab_switch_delay"])

                # Ch·ªù trang load ng·∫Øn
                page_load_wait = self.config["timing"]["page_load_wait"]
                if page_load_wait > 0:
                    self.logger.info(f"‚è≥ Ch·ªù {page_load_wait} gi√¢y ƒë·ªÉ trang ·ªïn ƒë·ªãnh...")
                    time.sleep(page_load_wait)

                # Th·ª±c hi·ªán flow cho tab hi·ªán t·∫°i
                self.logger.info(f"üöÄ B·∫Øt ƒë·∫ßu th·ª±c hi·ªán flow cho {tab_name}")
                success = self.export_for_tab(i)
                
                # L∆∞u k·∫øt qu·∫£
                result = {
                    "tab_name": tab_name,
                    "tab_index": i,
                    "success": success,
                    "timestamp": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    "error": None if success else "Download failed"
                }
                self.results.append(result)
                
                # Delay gi·ªØa c√°c tab
                if i < tabs_to_process - 1:
                    self.logger.info("‚è≥ Delay ng·∫Øn gi·ªØa c√°c tab...")
                    self.human_like_delay(0.8, 1.2)
                    
            # Sau khi ho√†n t·∫•t tab cu·ªëi c√πng, Ctrl+Tab th√™m 1 l·∫ßn theo y√™u c·∫ßu
            try:
                if tabs_to_process > 0:
                    self.logger.info("‚û°Ô∏è ƒê√£ ·ªü tab cu·ªëi c√πng trong chu k·ª≥, Ctrl+Tab th√™m 1 l·∫ßn n·ªØa")
                    pyautogui.hotkey('ctrl', 'tab')
                    time.sleep(self.config["timing"]["tab_switch_delay"])
            except Exception as _e:
                self.logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ Ctrl+Tab sau tab cu·ªëi: {_e}")

            # Kh√¥ng ƒë·∫£o v·ªÅ tab ƒë·∫ßu ti√™n ƒë·ªÉ tr√°nh reset trang
            self.logger.info("‚úÖ Ho√†n th√†nh chu k·ª≥ download")
            # Ch·ªù th√™m theo c·∫•u h√¨nh sau chu k·ª≥ (v√≠ d·ª• 120s)
            try:
                post_delay = int(self.config["timing"].get("post_cycle_delay_seconds", 0))
                if post_delay > 0:
                    self.logger.info(f"‚è≥ Ch·ªù th√™m {post_delay} gi√¢y tr∆∞·ªõc khi chu k·ª≥ ti·∫øp theo...")
                    time.sleep(post_delay)
            except Exception as _e:
                self.logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ch·ªù sau chu k·ª≥: {_e}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói trong chu k·ª≥ download: {e}")
            import traceback
            self.logger.error(f"Chi ti·∫øt l·ªói: {traceback.format_exc()}")
            return False
        finally:
            self.cycle_running = False
            
    def start_background_export(self):
        """B·∫Øt ƒë·∫ßu ch·∫°y ng·∫ßm xu·∫•t file"""
        try:
            self.logger.info("üöÄ B·∫Øt ƒë·∫ßu ch·∫°y ng·∫ßm xu·∫•t file")
            self.running = True
            
            # L·∫≠p l·ªãch xu·∫•t file
            interval_seconds = self.config["timing"].get("export_interval_seconds")
            interval_minutes = self.config["timing"].get("export_interval_minutes", 5)
            if interval_seconds is not None:
                schedule.every(interval_seconds).seconds.do(self.run_export_cycle)
                self.logger.info(f"‚è∞ ƒê√£ l·∫≠p l·ªãch xu·∫•t file m·ªói {interval_seconds} gi√¢y")
            else:
                schedule.every(interval_minutes).minutes.do(self.run_export_cycle)
                self.logger.info(f"‚è∞ ƒê√£ l·∫≠p l·ªãch xu·∫•t file m·ªói {interval_minutes} ph√∫t")
            
            # Ch·∫°y ngay l·∫ßn ƒë·∫ßu
            self.run_export_cycle()
            
            # V√≤ng l·∫∑p ch√≠nh
            while self.running:
                schedule.run_pending()
                time.sleep(0.5)
                
        except KeyboardInterrupt:
            self.logger.info("‚ö†Ô∏è ƒê√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
            self.running = False
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói trong ch·∫°y ng·∫ßm: {e}")
            self.running = False
                
    def stop_background_export(self):
        """D·ª´ng ch·∫°y ng·∫ßm"""
        self.running = False
        self.logger.info("‚èπÔ∏è ƒê√£ d·ª´ng ch·∫°y ng·∫ßm")
        
    def get_export_status(self):
        """L·∫•y tr·∫°ng th√°i xu·∫•t file"""
        return {
            "running": self.running,
            "current_tab_index": self.current_tab_index,
            "total_tabs": len(self.config["tab_names"]),
            "total_exports": len(self.results),
            "successful_exports": len([r for r in self.results if r["success"]]),
            "failed_exports": len([r for r in self.results if not r["success"]])
        }
        
    def save_results_to_csv(self):
        """L∆∞u k·∫øt qu·∫£ ra file CSV"""
        try:
            if not self.results:
                self.logger.warning("‚ö†Ô∏è Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ l∆∞u")
                return False
                
            df = pd.DataFrame(self.results)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"export_results_{timestamp}.csv"
            df.to_csv(filename, index=False, encoding='utf-8')
            
            self.logger.info(f"‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£: {filename}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói l∆∞u k·∫øt qu·∫£: {e}")
            return False

def main():
    """H√†m main"""
    print("=== Google Ads Mouse Clicker ===")
    print("üñ±Ô∏è Tool t·ª± ƒë·ªông click chu·ªôt th·∫≠t theo flow: Refresh ‚Üí Download ‚Üí Combobox")
    print("üåê S·ª≠ d·ª•ng Chrome ƒë√£ m·ªü s·∫µn")
    # Hi·ªÉn th·ªã l·ªãch ch·∫°y theo gi√¢y n·∫øu c√≥
    try:
        _tmp_cfg = GoogleAdsMouseClicker().config
        _sec = _tmp_cfg["timing"].get("export_interval_seconds")
        if _sec is not None:
            print(f"‚è∞ T·ª± ƒë·ªông th·ª±c hi·ªán m·ªói {_sec} gi√¢y")
        else:
            print(f"‚è∞ T·ª± ƒë·ªông th·ª±c hi·ªán m·ªói {_tmp_cfg['timing'].get('export_interval_minutes', 5)} ph√∫t")
    except Exception:
        print("‚è∞ T·ª± ƒë·ªông th·ª±c hi·ªán theo c·∫•u h√¨nh")
    print()
    print("üìã FLOW TH·ª∞C HI·ªÜN:")
    print("1. Click n√∫t Refresh")
    print("2. Click n√∫t Download")
    print("3. Ch·ªçn t√πy ch·ªçn trong combobox")
    print("4. Chuy·ªÉn sang tab ti·∫øp theo")
    print("5. Sau khi x·ª≠ l√Ω t·∫•t c·∫£ tab, chuy·ªÉn v·ªÅ tab ƒë·∫ßu ti√™n")
    print()
    print("üìã H∆Ø·ªöNG D·∫™N:")
    print("1. M·ªü Chrome v√† c√°c tab Google Ads MCC ƒë√£ ƒëƒÉng nh·∫≠p")
    print("2. Ch·∫°y tool n√†y")
    print("3. Tool s·∫Ω t·ª± ƒë·ªông th·ª±c hi·ªán theo th·ªùi gian trong config")
    print()
    
    # T·∫°o instance
    clicker = GoogleAdsMouseClicker()
    
    while True:
        print("\nüìã MENU:")
        print("1. B·∫Øt ƒë·∫ßu ch·∫°y ng·∫ßm")
        print("2. D·ª´ng ch·∫°y ng·∫ßm")
        print("3. Xem tr·∫°ng th√°i")
        print("4. Test click chu·ªôt")
        print("5. Xem c·∫•u h√¨nh")
        print("6. L∆∞u k·∫øt qu·∫£ ra CSV")
        print("7. Tho√°t")
        
        choice = input("\nCh·ªçn t√πy ch·ªçn (1-7): ").strip()
        
        if choice == '1':
            print("\nüöÄ B·∫Øt ƒë·∫ßu ch·∫°y ng·∫ßm...")
            print("‚ö†Ô∏è ƒê·∫£m b·∫£o ƒë√£ m·ªü Chrome v√† c√°c tab Google Ads MCC")
            confirm = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (y/N): ").strip().lower()
            if confirm == 'y':
                clicker.start_background_export()
            else:
                print("‚ùå ƒê√£ h·ªßy")
                
        elif choice == '2':
            clicker.stop_background_export()
            
        elif choice == '3':
            status = clicker.get_export_status()
            print(f"\nüìä Tr·∫°ng th√°i:")
            print(f"   ƒêang ch·∫°y: {'C√≥' if status['running'] else 'Kh√¥ng'}")
            print(f"   T·ªïng tab: {status['total_tabs']}")
            print(f"   T·ªïng l·∫ßn xu·∫•t: {status['total_exports']}")
            print(f"   Th√†nh c√¥ng: {status['successful_exports']}")
            print(f"   Th·∫•t b·∫°i: {status['failed_exports']}")
            
        elif choice == '4':
            print("\nüñ±Ô∏è Test click chu·ªôt...")
            print("‚ö†Ô∏è ƒê·∫£m b·∫£o ƒë√£ m·ªü Chrome v√† c√°c tab Google Ads MCC")
            confirm = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (y/N): ").strip().lower()
            if confirm == 'y':
                print("\nüñ±Ô∏è Test click chu·ªôt theo flow: Refresh ‚Üí Download ‚Üí Combobox...")
                for name, pos in clicker.config["click_positions"].items():
                    print(f"Click {name} t·∫°i ({pos['x']}, {pos['y']})")
                    if clicker.human_like_click(pos["x"], pos["y"], name):
                        print(f"‚úÖ Click th√†nh c√¥ng: {name}")
                    else:
                        print(f"‚ùå Click th·∫•t b·∫°i: {name}")
                    time.sleep(2)
            
        elif choice == '5':
            print("\nüìã C·∫•u h√¨nh hi·ªán t·∫°i:")
            print(f"   S·ªë tab: {len(clicker.config['tab_names'])}")
            sec = clicker.config['timing'].get('export_interval_seconds')
            if sec is not None:
                print(f"   Interval: {sec} gi√¢y")
            else:
                print(f"   Interval: {clicker.config['timing'].get('export_interval_minutes', 5)} ph√∫t")
            print(f"   Click positions:")
            for name, pos in clicker.config["click_positions"].items():
                print(f"     {name}: ({pos['x']}, {pos['y']})")
        
        elif choice == '6':
            clicker.save_results_to_csv()
        
        elif choice == '7':
            print("üëã T·∫°m bi·ªát!")
            break
        
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")

if __name__ == "__main__":
    main()
